import discord
import aiofiles
import re
import json
from bs4 import BeautifulSoup
import requests
from bot import bot




blacklist = []  # Leere Blacklist zum Speichern der Einträge

@bot.event
async def on_ready():
    print(f"{bot.user} ist online")
    await load_blacklist()  # Blacklist beim Start des Bots laden



@bot.slash_command(description="Speichert die Rollen-ID für die Blacklist-Permissions.")
async def set_required_role(ctx, role: discord.Role):
    with open("blacklistpermissions.json", "r+") as file:
        try:
            entries = json.load(file)
        except json.decoder.JSONDecodeError:
            entries = []

        # Überprüfen, ob es bereits einen Eintrag mit der gleichen Guild-ID gibt
        existing_entry = next((entry for entry in entries if entry["guild_id"] == ctx.guild.id), None)

        # Wenn vorhandener Eintrag gefunden wird, löschen und ersetzen
        if existing_entry:
            existing_entry["role_id"] = role.id
        else:
            # Neuen Eintrag hinzufügen
            new_entry = {"guild_id": ctx.guild.id, "role_id": role.id}
            entries.append(new_entry)

        # JSON-Datei aktualisieren
        file.seek(0)
        file.truncate()
        json.dump(entries, file, indent=4)

    await ctx.respond(f"Die Rolle {role.mention} wurde als Blacklist-Permission für den Server {ctx.guild.name} gespeichert.")




@bot.slash_command(description="Zeigt die Rolle für die Blacklist-Permissions an.")
async def get_required_role(ctx):
    with open("blacklistpermissions.json", "r") as file:
        entries = json.load(file)
        for entry in entries:
            if entry["guild_id"] == ctx.guild.id:
                role_id = entry["role_id"]
                role_name = await get_role_name(ctx.guild, role_id)
                await ctx.respond(f"Die Rolle, die als Blacklist-Permission für den Server {ctx.guild.name} gesetzt ist, lautet: {role_name}")
                return
        await ctx.respond(f"Es wurde keine Blacklist-Permission für den Server {ctx.guild.name} definiert.")

async def get_role_name(guild, role_id):
    role = guild.get_role(role_id)
    return role.name if role else "Unbekannte Rolle"


@bot.slash_command(description="Füge eine ID zur Blacklist hinzu")
async def füge_zur_blacklist_hinzu(ctx, id: int, name: str = None, grund: str = None):
    if not is_user_authorized(ctx.author.roles, ctx.guild):
        await ctx.respond("Du hast keine Berechtigung, diese Aktion auszuführen.")
        return

    if len(str(id)) != 9:
        await ctx.respond("Die ID darf maximal 9 Zeichen haben.")
        return

    if not str(id).isdigit():
        await ctx.respond("Die ID muss eine numerische Zahl sein.")
        return

    if name and len(name) > 20:
        await ctx.respond("Der Name darf maximal 20 Zeichen haben.")
        return

    if grund and len(grund) > 30:
        await ctx.respond("Der Grund darf maximal 30 Zeichen haben.")
        return

    if is_blacklisted(id):
        await ctx.respond("Diese ID ist bereits in der Blacklist.")
    else:
        author_name = ctx.author.name  # Benutzername des Autors
        entry = {"id": id, "name": name, "grund": grund, "eingetragen_von": author_name}
        blacklist.append(entry)
        save_blacklist()  # Blacklist speichern
        response = f"Die ID ***{id}*** wurde zur Blacklist hinzugefügt."
        response += f"\nEingetragen von: {author_name}"
        if name:
            response += f"\nName: {name}"
        else:
            response += "\nName: [Optional]"
        if grund:
            response += f"\nGrund: {grund}"
        else:
            response += "\nGrund: [Optional]"
        await ctx.respond(response, ephemeral=True)








@bot.slash_command(description="Entferne einen Eintrag aus der Blacklist.")
async def entferne_eintrag_aus_blacklist(ctx, entry_number: int):
    if not is_user_authorized(ctx.author.roles, ctx.guild):
        await ctx.respond("Du hast keine Berechtigung, diese Aktion auszuführen.")
        return

    if entry_number > 0 and entry_number <= len(blacklist):
        entry = blacklist.pop(entry_number - 1)
        id = entry["id"]
        save_blacklist()  # Blacklist speichern
        await ctx.respond(f"Eintrag {entry_number} (ID: {id}) wurde aus der Blacklist entfernt.")
    else:
        await ctx.respond("Ungültige Nummer. Bitte gib eine gültige fortlaufende Nummer an.")




@bot.slash_command(description="Frage die IDs in der Blacklist ab")
async def zeige_blacklist(ctx):
    if blacklist:
        embed = discord.Embed(title="Blacklist ☠️", color=0xFF0000)

        # Berechne die maximale Länge für jede Spalte basierend auf den Werten in der Blacklist
        max_id_length = max(len(str(entry["id"])) for entry in blacklist)
        max_name_length = max(len(entry["name"] or "") for entry in blacklist)
        max_grund_length = max(len(entry["grund"] or "") for entry in blacklist)
        max_eingetragen_von_length = max(len(entry["eingetragen_von"]) for entry in blacklist)

        # Erstelle eine Tabelle mit dynamischen Spaltenbreiten
        table = "Nr.  | ID" + " " * (max_id_length - 2) + " | Name" + " " * (max_name_length - 4) + " | Grund" + " " * (max_grund_length - 5) + " | Eingetragen von" + " " * (max_eingetragen_von_length - 13) + "\n"
        table += "-" * (6 + max_id_length + max_name_length + max_grund_length + max_eingetragen_von_length) + "\n"

        # Enumerate über die Einträge, um die Nummerierung zu erstellen
        for index, entry in enumerate(blacklist, start=1):
            id = str(entry["id"]).ljust(max_id_length)
            name = (entry["name"] or "").ljust(max_name_length)
            grund = (entry["grund"] or "").ljust(max_grund_length)
            eingetragen_von = entry["eingetragen_von"].ljust(max_eingetragen_von_length)

            # Füge einen Eintrag zur Tabelle hinzu
            table += f"{index:<4}| {id} | {name} | {grund} | {eingetragen_von}\n"

        # Füge die Tabelle als ein Feld zum Embed hinzu
        embed.add_field(name="Blacklist Einträge", value="```" + table + "```", inline=False)

        await ctx.respond(embed=embed)
    else:
        embed = discord.Embed(title="Blacklist ☠️", description="Die Blacklist ist leer.", color=0x00FF00)
        await ctx.respond(embed=embed)



@bot.slash_command(description="Extrahiere den Spielername aus einer SWGoH-Profilseite und gleiche mit der Blacklist ab")
async def durchsuche_profil(ctx, url: str):
    player_id = extract_player_id(url)
    player_name = extract_player_name(url)

    if player_id and player_name:
        if is_blacklisted(player_id):
            await ctx.respond(f"Der Spieler mit der ID **{player_id}** und dem Namen **{player_name}** ist auf der Blacklist.")
        else:
            await ctx.respond(f"Der Spieler mit der ID **{player_id}** und dem Namen **{player_name}** ist nicht auf der Blacklist.", ephemeral=True)
    else:
        await ctx.respond("Ungültige URL. Das SWGoH-Profil konnte nicht durchsucht werden.", ephemeral=True)

def is_blacklisted(player_id):
    return any(str(entry["id"]) == str(player_id) for entry in blacklist)




def remove_entry_from_blacklist(id):
    global blacklist
    blacklist = [entry for entry in blacklist if entry["id"] != id]

def save_blacklist():
    with open("blacklist.json", "w") as file:
        json.dump(blacklist, file)

def load_blacklist():
    global blacklist
    try:
        with open("blacklist.json", "r") as file:
            blacklist = json.load(file)
    except FileNotFoundError:
        blacklist = []

def extract_player_id(url):
    pattern = r"\/p\/(\d+)"
    match = re.search(pattern, url)
    if match:
        return match.group(1)
    return None

def extract_player_name(url):
    response = requests.get(url)
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        player_name_element = soup.find('h5', class_='panel-title text-center m-b-sm')
        if player_name_element:
            player_name = player_name_element.text.strip()
            return player_name
    return None

def is_blacklisted(player_id):
    return any(str(entry["id"]) == str(player_id) for entry in blacklist)



async def load_blacklist():
    global blacklist
    try:
        async with aiofiles.open("blacklist.json", "r") as file:
            blacklist = json.loads(await file.read())
    except FileNotFoundError:
        blacklist = []

async def save_blacklist():
    async with aiofiles.open("blacklist.json", "w") as file:
        await file.write(json.dumps(blacklist, indent=4))


def is_user_authorized(roles, guild):
    with open("blacklistpermissions.json", "r") as file:
        entries = json.load(file)
        for entry in entries:
            if entry["guild_id"] == guild.id:
                role_id = entry["role_id"]
                role = guild.get_role(role_id)
                if role and role in roles:
                    return True
    return False
